#!/usr/bin/env node
var childProcess = require('child_process');
var util = require('util');
var path = require('path');

var babel = require('babel');
var fse = require('fs-extra');
var nodeWatch = require('node-watch');

'use strict';

// CONFIG
// -----------------------------------------------
var srcDir = 'src';
var distDir = '.';
var cwd = process.cwd();

// options for babel
var babelOptions = {
  sourceMap: 'inline',
  modules: 'common',
  optional: ['runtime']
};

// colors for shell - for a more complete list
// cf. http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
var red   = '\033[0;31m';
var green = '\033[0;32m';
var NC    = '\033[0m'; // No Color

// COMMAND INTERPRETER
// -----------------------------------------------
var command = process.argv[2];

// arguments - create a key value object with next arguments
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2) {
  argv[args[i]] = args[i + 1];
}

// execute the correct function given the script
switch (command) {
  case '--watch':
    watch();
    break;
  case '--transpile':
    transpileAll();
    break;
  case '--doc': // must be tested
    generateDoc();
    break;
  // case '--dev-test':
  //   var result = testGitMasterBranch();
  //   console.log(result);
  //   break;
}

// HELPERS
// -----------------------------------------------

// create filename from src to dist
function createTargetName(filename) {
  return filename.replace(new RegExp('^' + srcDir), distDir);
}

function isGitMasterBranch() {
  var branch = childProcess.execSync('git symbolic-ref HEAD');
  return branch.toString().search('refs/heads/master') !== -1;
}

// SCRIPTS
// -----------------------------------------------

// watch source dir
function watch() {
  nodeWatch(srcDir, function(filename) {
    transpile(filename);
  });
}

// transpile all files in `srcDir`
function transpileAll() {
  var cmd = 'find ' + srcDir + ' -type f';

  childProcess.exec(cmd , function(err, stdout, stderr) {
    if (err) { console.error(err); }
    var fileList = stdout.split('\n');

    var stack = [];

    for (var i = 0; i < fileList.length; i++) {
      var file = fileList[i];
      if (!file) { continue; }

      stack.push(file);
    }

    transpile(stack.shift(), stack);
  });
}

// transpile one file or several files sequencially
// @param `stack` is a workaround for babel which has some kind of leak and
// cannot transpile several files in parallel without being messy with sourceMaps.
// Using the Sync method crash the entire script each time there is an error in
// the code which is really boring when watching...
function transpile(src, stack) {
  var target = createTargetName(src);

  babel.transformFile(src, babelOptions, function(err, result) {
    if (err) {
      var error = err.codeFrame || err;
      return console.error(error);
    }

    fse.outputFile(target, result.code, function(err) {
      if (err) { return console.error(err.message); }

      var msg = green + '=> "%s" successfully transpiled to "%s"' + NC;
      console.log(util.format(msg, src, target));

      // next
      if (stack && stack.length) {
        transpile(stack.shift(), stack);
      }
    });
  });
}

// @todo - must be tested
function generateDoc() {
  // check if in master
  // if (!isGitMasterBranch()) {
  //   var msg = red + '=> you must be in master branch to run the `doc` command' + NC;
  //   return console.log(msg);
  // }

  var execSync = childProcess.execSync;
  // prevent loosing non-comitted work
  execSync('git stash save');
  // delete current gh-pages branch if exists
  try { execSync('git branch -D gh-pages'); } catch (err) {}
  // create gh-pages branch
  execSync('git checkout -b gh-pages');
  // run esdoc
  execSync('esdoc -c ' + path.join(cwd, 'esdoc.json'));
  console.log('Created documentation');
  // rm * but doc/ examples/ README.md
  var files = fse.readdirSync(cwd);
  var toKeep = [
    '.git',
    '.gitignore',
    'bin',
    'doc',
    'manual',
    'node_modules',
    'README.md',
    'LICENSE',
    'esdoc.json'
  ];

  // toKeep.push(getUmdName());
  // toKeep.push(getMinName());

  files.forEach(function(file) {
    if (toKeep.indexOf(file) !== -1) { return; }
    fse.removeSync(file);
    console.log('delete ' + file);
  });

  fse.copySync('doc', '.');
  console.log('copy doc into ' + cwd);

  fse.removeSync('doc');

  execSync('git add -A');
  execSync('git commit -am "updated documentation"');
  execSync('git push origin gh-pages --force');
  execSync('git checkout develop'); // TODO: remove when stable
  // execSync('git checkout master'); // TODO: uncomment when stable
  execSync('git branch -D gh-pages');
  try { execSync('git stash pop'); } catch(err) {}
}
