(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 *//**
 * Filter removing offset (combining 1st-order differentiator and integrtor)
 *
 * @constructor
 * @param {number} factor - feedback factor of integrator.
 */
var DiffInteg = (function(){var DP$0 = Object.defineProperty;"use strict";
  function DiffInteg() {var factor = arguments[0];if(factor === void 0)factor = 0.98;
    if(factor < 0)
      factor = 0.0;
    else if(factor > 1)
      factor = 1;

    this.factor = factor;

    this.last = null;
    this.output = 0;
  }DP$0(DiffInteg, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Input and process value.
   *
   * @param {number} value - input value.
   * @returns filtered value
   */
  DiffInteg.prototype.input = function(value) {
    if(this.last !== null) {
      var diff = value - this.last;
      this.output = this.factor * (this.output + diff);
    } else {
      this.output = 0.0;
    }
    
    this.last = value;

    return this.output;
  }
;return DiffInteg;})();

module.exports = DiffInteg;

},{}],2:[function(require,module,exports){
module.exports.Mvavrg = require('./mvavrg');
module.exports.DiffInteg = require('./diffinteg');

},{"./diffinteg":1,"./mvavrg":3}],3:[function(require,module,exports){
/* Generated by es6-transpiler v 0.7.14-2 *//**
 * Moving avarage filter.
 *
 * @constructor
 * @param {number} size - The inittial filter size.
 */
 var Mvavrg = (function(){var DP$0 = Object.defineProperty;"use strict";
  function Mvavrg(size) {
    this.__buffer = new Float32Array(size);
    this.__index = 0;
  }Object.defineProperties(Mvavrg.prototype, {size: {"get": size$get$0, "set": size$set$0, "configurable": true, "enumerable": true}});DP$0(Mvavrg, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Reset and (optionally) resize filter.
   *
   * @param {number|null} size - The new filter size (optional)
   */
  function size$set$0(size) {
    this.__buffer = new Float32Array(size);
    this.__index = 0;
  }

  function size$get$0() {
    return this.__buffer.length;
  }

  /**
   * Input and process value.
   *
   * @param {number} value - input value.
   * @returns filtered value
   */
  Mvavrg.prototype.input = function(value) {
    this.__buffer[this.__index] = value;

    var sum = 0.0;

    for(var i = 0; i < this.__buffer.length; i++)
      sum += this.__buffer[i];

    this.__index = (this.__index + 1) % this.__buffer.length;

    return sum / this.__buffer.length;
  }
;return Mvavrg;})();

module.exports = Mvavrg;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zY2huZWxsL0RldmVsb3BtZW50L3dlYi9taXNjL2d1bHBCcm93RXJzeTYvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9zY2huZWxsL0RldmVsb3BtZW50L3dlYi9jb3NpbWEvY29zaW1hL2ZpbHRlcnMvZGlmZmludGVnLmpzIiwiL1VzZXJzL3NjaG5lbGwvRGV2ZWxvcG1lbnQvd2ViL2Nvc2ltYS9jb3NpbWEvZmlsdGVycy9pbmRleC5qcyIsIi9Vc2Vycy9zY2huZWxsL0RldmVsb3BtZW50L3dlYi9jb3NpbWEvY29zaW1hL2ZpbHRlcnMvbXZhdnJnLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBHZW5lcmF0ZWQgYnkgZXM2LXRyYW5zcGlsZXIgdiAwLjcuMTQtMiAqLy8qKlxuICogRmlsdGVyIHJlbW92aW5nIG9mZnNldCAoY29tYmluaW5nIDFzdC1vcmRlciBkaWZmZXJlbnRpYXRvciBhbmQgaW50ZWdydG9yKVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGZhY3RvciAtIGZlZWRiYWNrIGZhY3RvciBvZiBpbnRlZ3JhdG9yLlxuICovXG52YXIgRGlmZkludGVnID0gKGZ1bmN0aW9uKCl7dmFyIERQJDAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XCJ1c2Ugc3RyaWN0XCI7XG4gIGZ1bmN0aW9uIERpZmZJbnRlZygpIHt2YXIgZmFjdG9yID0gYXJndW1lbnRzWzBdO2lmKGZhY3RvciA9PT0gdm9pZCAwKWZhY3RvciA9IDAuOTg7XG4gICAgaWYoZmFjdG9yIDwgMClcbiAgICAgIGZhY3RvciA9IDAuMDtcbiAgICBlbHNlIGlmKGZhY3RvciA+IDEpXG4gICAgICBmYWN0b3IgPSAxO1xuXG4gICAgdGhpcy5mYWN0b3IgPSBmYWN0b3I7XG5cbiAgICB0aGlzLmxhc3QgPSBudWxsO1xuICAgIHRoaXMub3V0cHV0ID0gMDtcbiAgfURQJDAoRGlmZkludGVnLCBcInByb3RvdHlwZVwiLCB7XCJjb25maWd1cmFibGVcIjogZmFsc2UsIFwiZW51bWVyYWJsZVwiOiBmYWxzZSwgXCJ3cml0YWJsZVwiOiBmYWxzZX0pO1xuXG4gIC8qKlxuICAgKiBJbnB1dCBhbmQgcHJvY2VzcyB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gaW5wdXQgdmFsdWUuXG4gICAqIEByZXR1cm5zIGZpbHRlcmVkIHZhbHVlXG4gICAqL1xuICBEaWZmSW50ZWcucHJvdG90eXBlLmlucHV0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZih0aGlzLmxhc3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBkaWZmID0gdmFsdWUgLSB0aGlzLmxhc3Q7XG4gICAgICB0aGlzLm91dHB1dCA9IHRoaXMuZmFjdG9yICogKHRoaXMub3V0cHV0ICsgZGlmZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3V0cHV0ID0gMC4wO1xuICAgIH1cbiAgICBcbiAgICB0aGlzLmxhc3QgPSB2YWx1ZTtcblxuICAgIHJldHVybiB0aGlzLm91dHB1dDtcbiAgfVxuO3JldHVybiBEaWZmSW50ZWc7fSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBEaWZmSW50ZWc7XG4iLCJtb2R1bGUuZXhwb3J0cy5NdmF2cmcgPSByZXF1aXJlKCcuL212YXZyZycpO1xubW9kdWxlLmV4cG9ydHMuRGlmZkludGVnID0gcmVxdWlyZSgnLi9kaWZmaW50ZWcnKTtcbiIsIi8qIEdlbmVyYXRlZCBieSBlczYtdHJhbnNwaWxlciB2IDAuNy4xNC0yICovLyoqXG4gKiBNb3ZpbmcgYXZhcmFnZSBmaWx0ZXIuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBpbml0dGlhbCBmaWx0ZXIgc2l6ZS5cbiAqL1xuIHZhciBNdmF2cmcgPSAoZnVuY3Rpb24oKXt2YXIgRFAkMCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcInVzZSBzdHJpY3RcIjtcbiAgZnVuY3Rpb24gTXZhdnJnKHNpemUpIHtcbiAgICB0aGlzLl9fYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTtcbiAgICB0aGlzLl9faW5kZXggPSAwO1xuICB9T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTXZhdnJnLnByb3RvdHlwZSwge3NpemU6IHtcImdldFwiOiBzaXplJGdldCQwLCBcInNldFwiOiBzaXplJHNldCQwLCBcImNvbmZpZ3VyYWJsZVwiOiB0cnVlLCBcImVudW1lcmFibGVcIjogdHJ1ZX19KTtEUCQwKE12YXZyZywgXCJwcm90b3R5cGVcIiwge1wiY29uZmlndXJhYmxlXCI6IGZhbHNlLCBcImVudW1lcmFibGVcIjogZmFsc2UsIFwid3JpdGFibGVcIjogZmFsc2V9KTtcblxuICAvKipcbiAgICogUmVzZXQgYW5kIChvcHRpb25hbGx5KSByZXNpemUgZmlsdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcnxudWxsfSBzaXplIC0gVGhlIG5ldyBmaWx0ZXIgc2l6ZSAob3B0aW9uYWwpXG4gICAqL1xuICBmdW5jdGlvbiBzaXplJHNldCQwKHNpemUpIHtcbiAgICB0aGlzLl9fYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTtcbiAgICB0aGlzLl9faW5kZXggPSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZSRnZXQkMCgpIHtcbiAgICByZXR1cm4gdGhpcy5fX2J1ZmZlci5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogSW5wdXQgYW5kIHByb2Nlc3MgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIGlucHV0IHZhbHVlLlxuICAgKiBAcmV0dXJucyBmaWx0ZXJlZCB2YWx1ZVxuICAgKi9cbiAgTXZhdnJnLnByb3RvdHlwZS5pbnB1dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fX2J1ZmZlclt0aGlzLl9faW5kZXhdID0gdmFsdWU7XG5cbiAgICB2YXIgc3VtID0gMC4wO1xuXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuX19idWZmZXIubGVuZ3RoOyBpKyspXG4gICAgICBzdW0gKz0gdGhpcy5fX2J1ZmZlcltpXTtcblxuICAgIHRoaXMuX19pbmRleCA9ICh0aGlzLl9faW5kZXggKyAxKSAlIHRoaXMuX19idWZmZXIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHN1bSAvIHRoaXMuX19idWZmZXIubGVuZ3RoO1xuICB9XG47cmV0dXJuIE12YXZyZzt9KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE12YXZyZztcbiJdfQ==
