/* Generated by es6-transpiler v 0.7.14-2 *//**
 * Moving avarage filter.
 *
 * @constructor
 * @param {number} size - The inittial filter size.
 */
 var Mvavrg = (function(){var DP$0 = Object.defineProperty;"use strict";
  function Mvavrg(size) {
    this.__buffer = new Float32Array(size);
    this.__index = 0;
  }Object.defineProperties(Mvavrg.prototype, {size: {"get": size$get$0, "set": size$set$0, "configurable": true, "enumerable": true}});DP$0(Mvavrg, "prototype", {"configurable": false, "enumerable": false, "writable": false});

  /**
   * Reset and (optionally) resize filter.
   *
   * @param {number|null} size - The new filter size (optional)
   */
  function size$set$0(size) {
    this.__buffer = new Float32Array(size);
    this.__index = 0;
  }

  function size$get$0() {
    return this.__buffer.length;
  }

  /**
   * Input and process value.
   *
   * @param {number} value - input value.
   * @returns filtered value
   */
  Mvavrg.prototype.input = function(value) {
    this.__buffer[this.__index] = value;

    var sum = 0.0;

    for(var i = 0; i < this.__buffer.length; i++)
      sum += this.__buffer[i];

    this.__index = (this.__index + 1) % this.__buffer.length;

    return sum / this.__buffer.length;
  }
;return Mvavrg;})();

module.exports = Mvavrg;
